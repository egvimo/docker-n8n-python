name: Publish

on:
  schedule:
    - cron: '0 3 * * *'
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      force_publish:
        description: 'Publish even if the versions are equal'
        type: boolean
        required: false
        default: false

env:
  registry: ghcr.io
  image_name: ${{ github.repository_owner }}/n8n-python

jobs:
  check:
    name: Check
    runs-on: ubuntu-latest
    outputs:
      changed: ${{ steps.check.outputs.changed }}
    permissions:
      packages: read

    steps:
      - name: Compare n8n versions
        id: check
        run: |
          n8n_version=$(curl --no-progress-meter 'https://registry.npmjs.org/n8n/latest' | jq --raw-output '.version')

          docker pull ${{ env.registry }}/${{ env.image_name }}:latest
          n8n_python_version=$(docker image inspect --format '{{json .}}' ${{ env.registry }}/${{ env.image_name }}:latest | jq --raw-output '.Config.Labels."org.opencontainers.image.version"')

          echo "n8n: $n8n_version" ; echo "n8n-python: $n8n_python_version"
          if [ "$n8n_version" != "$n8n_python_version" ]; then
            echo "changed=true" >> $GITHUB_OUTPUT
          else
            echo "changed=false" >> $GITHUB_OUTPUT
          fi

  publish:
    name: Publish
    runs-on: ubuntu-latest
    needs: check
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get latest version
        run: |
          echo "n8n_version=$(curl --no-progress-meter 'https://registry.npmjs.org/n8n/latest' | jq --raw-output '.version')" >> $GITHUB_ENV

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.registry }}/${{ env.image_name }}
          tags: |
            type=raw,value=latest
            type=raw,value=${{ env.n8n_version }}
          labels: |
            org.opencontainers.image.title=n8n-python
            org.opencontainers.image.version=${{ env.n8n_version }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: linux/amd64,linux/arm64

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          platforms: linux/amd64,linux/arm64

      - name: Login to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.registry }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: ${{ inputs.force_publish || needs.check.outputs.changed }}
          build-args: |
            VERSION=${{ env.n8n_version }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
